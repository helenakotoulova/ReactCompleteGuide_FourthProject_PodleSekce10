{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helena.kotoulova\\\\ReactCompleteGuide\\\\fourth-project-useEffect\\\\01-starting-project\\\\01-starting-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/context/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true); // chceme aby pri reloadovani stranky zustal uzivatel prihlaseny, aniz by musel znovu zadavat prihlasovaci udaje,\n      // ale takhle vytvorime infinite loop, protoze pokud to je 1 tak nastavi setIsLoggedIn na true,a kdyz se zmeni useState, tak to bezi znovu,\n      // proto pridame useEffect\n    }\n  }, []); // tu dependency nechame takhle. spusti se to jen pri renderu (reloadu)\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\"); // ten local storage nema nic spolecnyho s reactem, souvisi to s browserem. dalsi zpusob storovani by byly cookies.\n    // local Storage.setItem ma 2 vstupy - nejaky string a pak i nejaky dalsi string signalizujici, ze je to pravda. zde '1' bude logged in a '0' logged out.\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\"); // takhle se to vycisti\n\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/helena.kotoulova/ReactCompleteGuide/fourth-project-useEffect/01-starting-project/01-starting-project/src/App.js"],"names":["React","useEffect","useState","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","onLogout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AACA,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AACzCD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADyC,CACpB;AACrB;AACA;AACD;AACF,GAPQ,EAON,EAPM,CAAT,CAHa,CAUL;;AAER,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AAEAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC,EAJwC,CAIC;AACzC;;AACAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAPD;;AASA,QAAMQ,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB,EAD0B,CACa;;AACvCT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAED,MAAAA,UAAU,EAAEA,UAAd;AAA0BW,MAAAA,QAAQ,EAAEF;AAApC,KAA7B;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAnCQV,G;;KAAAA,G;AAqCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./components/context/auth-context\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true); // chceme aby pri reloadovani stranky zustal uzivatel prihlaseny, aniz by musel znovu zadavat prihlasovaci udaje,\n      // ale takhle vytvorime infinite loop, protoze pokud to je 1 tak nastavi setIsLoggedIn na true,a kdyz se zmeni useState, tak to bezi znovu,\n      // proto pridame useEffect\n    }\n  }, []); // tu dependency nechame takhle. spusti se to jen pri renderu (reloadu)\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n\n    localStorage.setItem(\"isLoggedIn\", \"1\"); // ten local storage nema nic spolecnyho s reactem, souvisi to s browserem. dalsi zpusob storovani by byly cookies.\n    // local Storage.setItem ma 2 vstupy - nejaky string a pak i nejaky dalsi string signalizujici, ze je to pravda. zde '1' bude logged in a '0' logged out.\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\"); // takhle se to vycisti\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler}}>\n      <MainHeader onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}