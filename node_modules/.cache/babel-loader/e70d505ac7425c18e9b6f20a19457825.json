{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helena.kotoulova\\\\ReactCompleteGuide\\\\fourth-project-useEffect\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../context/auth-context\"; // tuhle funkci si muzeme nadefinovat mimo Login komponentu, protoze\n// ta nebude pouzivat zadna data, ktera budou generovana v Login komponente.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  /*\n  VE VSECH TECH NASLEDUJICICH USESTATE DELAME CHYBU - VYHODNOCUJEME NEJAKY STATE POMOCI JINYCH STATU,\n  TO JE VIOLATING USESTATE A MUZE TO VEST K CHYBAM.\n  V TAKOVYCH PRIPADECH, KDY NEJAKY STATE ZAVISI NA JINYCH STATECH, JE VYHODNE POUZIT USE REDUCER,\n  COZ JE KOMPLEXNEJSI VERZE USESTATE.\n  Kazdopadne useState je hlavni state management tool. Je dobry pro nezavisla data a jednoduche state updaty.\n  UseReducer se hodi pro komplexnejsi priklady, napr pokud pracujeme s provazanymi daty/states a pro komplexnejsi state updaty.\n  */\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  //const [enteredPassword, setEnteredPassword] = useState(\"\");\n  //const [passwordIsValid, setPasswordIsValid] = useState();\n  const authCtx = useContext(AuthContext);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  }); //-------------------------------------------------------------------------------\n\n  /* UKAZKOVY USE EFFECT\n  useEffect(() => {\n    console.log('effect running')\n    return() => {\n      console.log(''effect cleanup') // tahle clean up funkce bezi pokazde kdyz se spusti useEffect, ale ne pri prvnim renderu\n    }\n  }, [enteredPassword]);\n  */\n  // pokud jen useEffect(() => {}), tak se to spousti pri kazde zmene.\n  // pokud jen useEffect(() => {}, []), tak se to spusti jen jednou\n  //-------------------------------------------------------------------------------\n  // TAKHLE JSME ZKOMBINOVALI useEffect A useState, resp UseReducer (USEEEFFECT JSME POUZILI NA OVERENI FORMISVALID)\n  // do techto const si uschovame property isValid tech objektu emailState a passwordState (jde o destructuring objektu)\n  // a priradime jim alias (to je to za dvojteckou), protoze se jinak jmenujou stejne ty property\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    // pridame setTimeout, aby se to spoustelo jen tehdy, kdyz uzivatel prestane na chvili psat,\n    // a ne pri kazdem key stroku. je ale potreba pridat i clean up function, aby bezel vzdy jen jeden setTimeout.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity\");\n      setFormIsValid( //enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6 // takhle to bylo pro variantu s useState\n      emailState.isValid && passwordState.isValid);\n    }, 500);\n    return () => {\n      // clean up function before useEffect runs the setTimeout (a setFotmIsValid) znovu.\n      console.log(\"cleanup\");\n      clearTimeout(identifier); // vycistime si Timeout predtim nez se nastavi novy.\n    };\n  }, [emailIsValid, passwordIsValid]); // ten useEffect chceme nechat bezet jen kdyz se zmeni valid state a ne value. Nemusime delat destructuring, slo by zapsat i jako [someObject.someProperty]. \n  //Ale nemelo by tam byt [someObject], protoze pak to pobezi vzdycky kdyz se zmeni kterakoliv property, ne jen ta jedna konkretni, co nas zajima.\n  //}, [enteredEmail, enteredPassword]); // (tohle byla verze pro useState). do useeefectu musime dat nejake dependency, protoze jinak se to nikdy nenastavi na formIsValid.\n  // do dependency davame vsechny veci, ktere by se mohly zmenit kdyz se nase nebo parent component re-renderuje.\n\n  /* \n  Kdyz budu psat hodne rychle, tak uvidim v consoli jen cleanup. jak se zastavim, tak uvidim i checking form validity.\n  To je vyhodne, protoze nebudeme odesilat x bambilionu https requests (pri kazdem key stroku), ale jen jak se na chvili zastavime.\n  */\n  //-------------------------------------------------------------------------------\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // to val je nas payload. (payload = uzitecne zatizeni), dispatch = odeslat\n    //setFormIsValid(event.target.value.includes(\"@\") && passwordState.isValid); // tohle vyresime pomoci useEffect\n\n    /* \n    //Takhle to bylo bez useEffectu plus s pouzitim useState.\n    setEnteredEmail(event.target.value);\n    setFormIsValid(\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\n    );\n    */\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); //setFormIsValid(emailState.isValid && event.target.value.trim().length > 6); // tohle vyresime pomoci useEffect\n\n    /*\n    Takhle to bylo bez useEffectu plus s pouzitim useState.\n    setEnteredPassword(event.target.value);\n    setFormIsValid(\n      event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    );\n    */\n  };\n\n  const validateEmailHandler = () => {\n    /* takhle to bylo pomoci useState\n    setEmailIsValid(enteredEmail.includes(\"@\"));\n    */\n    // takhle pomoci useReducer:\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // pomoci useReducer:\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    });\n    /* takhle to bylo pomoci useState\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n    */\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // pred pouzitim useReducer bylo:  props.onLogin(enteredEmail, enteredPassword);\n    // pred pouzitim Contextu bylo: props.onLogin(emailState.value, passwordState.value);\n\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\" // pred pouzitim useReducer bylo emailIsValid === false?\n        }`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value // pred pouzitim useReducer bylo value={enteredEmail}\n          ,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\" // passwordIsValid === false ?\n        }`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value //  value={enteredPassword}\n          ,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"Guzh2VjriHQU7Kdl2nOHJ47Q3wI=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/helena.kotoulova/ReactCompleteGuide/fourth-project-useEffect/01-starting-project/01-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","authCtx","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../context/auth-context\";\n\n// tuhle funkci si muzeme nadefinovat mimo Login komponentu, protoze\n// ta nebude pouzivat zadna data, ktera budou generovana v Login komponente.\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.includes(\"@\") };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.includes(\"@\") };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if (action.type === \"INPUT_BLUR\") {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: \"\", isValid: false };\n};\n\nconst Login = (props) => {\n  /*\nVE VSECH TECH NASLEDUJICICH USESTATE DELAME CHYBU - VYHODNOCUJEME NEJAKY STATE POMOCI JINYCH STATU,\nTO JE VIOLATING USESTATE A MUZE TO VEST K CHYBAM.\nV TAKOVYCH PRIPADECH, KDY NEJAKY STATE ZAVISI NA JINYCH STATECH, JE VYHODNE POUZIT USE REDUCER,\nCOZ JE KOMPLEXNEJSI VERZE USESTATE.\nKazdopadne useState je hlavni state management tool. Je dobry pro nezavisla data a jednoduche state updaty.\nUseReducer se hodi pro komplexnejsi priklady, napr pokud pracujeme s provazanymi daty/states a pro komplexnejsi state updaty.\n*/\n\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  //const [enteredPassword, setEnteredPassword] = useState(\"\");\n  //const [passwordIsValid, setPasswordIsValid] = useState();\n\n  const authCtx = useContext(AuthContext);\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  //-------------------------------------------------------------------------------\n  /* UKAZKOVY USE EFFECT\n  useEffect(() => {\n    console.log('effect running')\n    return() => {\n      console.log(''effect cleanup') // tahle clean up funkce bezi pokazde kdyz se spusti useEffect, ale ne pri prvnim renderu\n    }\n  }, [enteredPassword]);\n  */\n  // pokud jen useEffect(() => {}), tak se to spousti pri kazde zmene.\n  // pokud jen useEffect(() => {}, []), tak se to spusti jen jednou\n  //-------------------------------------------------------------------------------\n\n  // TAKHLE JSME ZKOMBINOVALI useEffect A useState, resp UseReducer (USEEEFFECT JSME POUZILI NA OVERENI FORMISVALID)\n  \n  // do techto const si uschovame property isValid tech objektu emailState a passwordState (jde o destructuring objektu)\n  // a priradime jim alias (to je to za dvojteckou), protoze se jinak jmenujou stejne ty property\n  const { isValid: emailIsValid} = emailState;\n  const {isValid: passwordIsValid} = passwordState;\n\n  useEffect(() => {\n    // pridame setTimeout, aby se to spoustelo jen tehdy, kdyz uzivatel prestane na chvili psat,\n    // a ne pri kazdem key stroku. je ale potreba pridat i clean up function, aby bezel vzdy jen jeden setTimeout.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity\");\n      setFormIsValid(\n        //enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6 // takhle to bylo pro variantu s useState\n        emailState.isValid && passwordState.isValid\n      );\n    }, 500);\n\n    return () => {\n      // clean up function before useEffect runs the setTimeout (a setFotmIsValid) znovu.\n      console.log(\"cleanup\");\n      clearTimeout(identifier); // vycistime si Timeout predtim nez se nastavi novy.\n    };\n  }, [emailIsValid, passwordIsValid]); // ten useEffect chceme nechat bezet jen kdyz se zmeni valid state a ne value. Nemusime delat destructuring, slo by zapsat i jako [someObject.someProperty]. \n  //Ale nemelo by tam byt [someObject], protoze pak to pobezi vzdycky kdyz se zmeni kterakoliv property, ne jen ta jedna konkretni, co nas zajima.\n  //}, [enteredEmail, enteredPassword]); // (tohle byla verze pro useState). do useeefectu musime dat nejake dependency, protoze jinak se to nikdy nenastavi na formIsValid.\n  // do dependency davame vsechny veci, ktere by se mohly zmenit kdyz se nase nebo parent component re-renderuje.\n  /* \n  Kdyz budu psat hodne rychle, tak uvidim v consoli jen cleanup. jak se zastavim, tak uvidim i checking form validity.\n  To je vyhodne, protoze nebudeme odesilat x bambilionu https requests (pri kazdem key stroku), ale jen jak se na chvili zastavime.\n  */\n  //-------------------------------------------------------------------------------\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_INPUT\", val: event.target.value }); // to val je nas payload. (payload = uzitecne zatizeni), dispatch = odeslat\n    //setFormIsValid(event.target.value.includes(\"@\") && passwordState.isValid); // tohle vyresime pomoci useEffect\n    \n    /* \n    //Takhle to bylo bez useEffectu plus s pouzitim useState.\n    setEnteredEmail(event.target.value);\n    setFormIsValid(\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\n    );\n    */\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\n    //setFormIsValid(emailState.isValid && event.target.value.trim().length > 6); // tohle vyresime pomoci useEffect\n    \n    /*\n    Takhle to bylo bez useEffectu plus s pouzitim useState.\n    setEnteredPassword(event.target.value);\n    setFormIsValid(\n      event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    );\n    */\n  };\n\n  const validateEmailHandler = () => {\n    /* takhle to bylo pomoci useState\n    setEmailIsValid(enteredEmail.includes(\"@\"));\n    */\n\n    // takhle pomoci useReducer:\n    dispatchEmail({ type: \"INPUT_BLUR\" });\n  };\n\n  const validatePasswordHandler = () => {\n    // pomoci useReducer:\n    dispatchPassword({ type: \"INPUT_BLUR\" });\n\n    /* takhle to bylo pomoci useState\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n    */\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    // pred pouzitim useReducer bylo:  props.onLogin(enteredEmail, enteredPassword);\n    // pred pouzitim Contextu bylo: props.onLogin(emailState.value, passwordState.value);\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\" // pred pouzitim useReducer bylo emailIsValid === false?\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value} // pred pouzitim useReducer bylo value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : \"\" // passwordIsValid === false ?\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value} //  value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}