{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helena.kotoulova\\\\ReactCompleteGuide\\\\fourth-project-useEffect\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  return {\n    value: \"\",\n    isValid: false\n  };\n}; // tuhle funkci si muzeme nadefinovat mimo Login komponentu, protoze\n// ta nebude pouzivat zadna data, ktera budou generovana v Login komponente.\n\n\nconst Login = props => {\n  _s();\n\n  /*\n  VE VSECH TECH NASLEDUJICICH USESTATE DELAME CHYBU - VYHODNOCUJEME NEJAKY STATE POMOCI JINYCH STATU,\n  TO JE VIOLATING USESTATE A MUZE TO VEST K CHYBAM.\n  V TAKOVYCH PRIPADECH, KDY NEJAKY STATE ZAVISI NA JINYCH STATECH, JE VYHODNE POUZIT USE REDUCER,\n  COZ JE KOMPLEXNEJSI VERZE USESTATE.\n  */\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false\n  });\n  /*\n  useEffect(() => {\n    console.log('effect running')\n    return() => {\n      console.log(''effect cleanup') // tahle clean up funkce bezi pokazde kdyz se spusti useEffect, ale ne pri prvnim renderu\n    }\n  }, [enteredPassword]);\n  */\n  // pokud jen useEffect(() => {}), tak se to spousti pri kazde zmene.\n  // pokud jen useEffect(() => {}, []), tak se to spusti jen jednou\n\n  /* TAKHLE JSME ZKOMBINOVALI USEEFFECT A USE STATE.\n  useEffect(() => {\n    // pridame setTimeout, aby se to spoustelo jen tehdy, kdyz uzivatel prestane na chvili psat,\n    // a ne pri kazdem key stroku. je ale potreba pridat i clean up function, aby bezel vzdy jen jeden setTimeout.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity\");\n      setFormIsValid(\n        enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6\n      );\n    }, 500);\n     return () => {\n      // clean up function before useEffect runs the setTimeout (a setFotmIsValid) znovu.\n      console.log(\"cleanup\");\n      clearTimeout(identifier); // vycistime si Timeout predtim nez se nastavi novy.\n    };\n  }, [enteredEmail, enteredPassword]); // tady musi byt nejake dependency, protoze jinak se to nikdy nenastavi na formIsValid.\n  // do dependency davame vsechny veci, ktere by se mohly zmenit kdyz se nase nebo parent component re-renderuje.\n  /* \n  Kdyz budu psat hodne rychle, tak uvidim v consoli jen cleanup. jak se zastavim, tak uvidim i checking form validity.\n  To je vyhodne, protoze nebudeme odesilat x bambilionu https requests (pri kazdem key stroku), ale jen jak se na chvili zastavime.\n  */\n\n  const emailChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n    /* takhle to bylo bez useEffectu plus s pouzitim useState.\n    setFormIsValid(\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\n    );\n    */\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    /* takhle to bylo bez useEffectu\n    setFormIsValid(\n      event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    );\n    */\n    // takhle to bude pomoci useReducer\n\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  };\n\n  const validateEmailHandler = () => {\n    /* takhle to bylo pomoci useState\n    setEmailIsValid(enteredEmail.includes(\"@\"));\n    */\n    // takhle pomoci useReducer:\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // predtim bylo:  props.onLogin(enteredEmail, enteredPassword);\n\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailState.isValid === false ? classes.invalid : \"\" // predtim bylo emailIsValid === false?\n        }`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value // predtim bylo value={enteredEmail}\n          ,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"OjZLQAPhiann9MOf0R/laRmb8wk=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/helena.kotoulova/ReactCompleteGuide/fourth-project-useEffect/01-starting-project/01-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","value","isValid","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","emailChangeHandler","event","setEnteredEmail","target","passwordChangeHandler","trim","length","validateEmailHandler","setEmailIsValid","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst emailReducer = (state, action) => {\n  return { value: \"\", isValid: false };\n};\n// tuhle funkci si muzeme nadefinovat mimo Login komponentu, protoze\n// ta nebude pouzivat zadna data, ktera budou generovana v Login komponente.\n\nconst Login = (props) => {\n  /*\nVE VSECH TECH NASLEDUJICICH USESTATE DELAME CHYBU - VYHODNOCUJEME NEJAKY STATE POMOCI JINYCH STATU,\nTO JE VIOLATING USESTATE A MUZE TO VEST K CHYBAM.\nV TAKOVYCH PRIPADECH, KDY NEJAKY STATE ZAVISI NA JINYCH STATECH, JE VYHODNE POUZIT USE REDUCER,\nCOZ JE KOMPLEXNEJSI VERZE USESTATE.\n*/\n\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  //const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: false,\n  });\n\n  /*\n  useEffect(() => {\n    console.log('effect running')\n    return() => {\n      console.log(''effect cleanup') // tahle clean up funkce bezi pokazde kdyz se spusti useEffect, ale ne pri prvnim renderu\n    }\n  }, [enteredPassword]);\n  */\n  // pokud jen useEffect(() => {}), tak se to spousti pri kazde zmene.\n  // pokud jen useEffect(() => {}, []), tak se to spusti jen jednou\n\n  /* TAKHLE JSME ZKOMBINOVALI USEEFFECT A USE STATE.\n  useEffect(() => {\n    // pridame setTimeout, aby se to spoustelo jen tehdy, kdyz uzivatel prestane na chvili psat,\n    // a ne pri kazdem key stroku. je ale potreba pridat i clean up function, aby bezel vzdy jen jeden setTimeout.\n    const identifier = setTimeout(() => {\n      console.log(\"Checking form validity\");\n      setFormIsValid(\n        enteredEmail.includes(\"@\") && enteredPassword.trim().length > 6\n      );\n    }, 500);\n\n    return () => {\n      // clean up function before useEffect runs the setTimeout (a setFotmIsValid) znovu.\n      console.log(\"cleanup\");\n      clearTimeout(identifier); // vycistime si Timeout predtim nez se nastavi novy.\n    };\n  }, [enteredEmail, enteredPassword]); // tady musi byt nejake dependency, protoze jinak se to nikdy nenastavi na formIsValid.\n  // do dependency davame vsechny veci, ktere by se mohly zmenit kdyz se nase nebo parent component re-renderuje.\n  /* \n  Kdyz budu psat hodne rychle, tak uvidim v consoli jen cleanup. jak se zastavim, tak uvidim i checking form validity.\n  To je vyhodne, protoze nebudeme odesilat x bambilionu https requests (pri kazdem key stroku), ale jen jak se na chvili zastavime.\n  */\n  \n  const emailChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n\n    /* takhle to bylo bez useEffectu plus s pouzitim useState.\n    setFormIsValid(\n      event.target.value.includes('@') && enteredPassword.trim().length > 6\n    );\n    */\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n\n    /* takhle to bylo bez useEffectu\n    setFormIsValid(\n      event.target.value.trim().length > 6 && enteredEmail.includes('@')\n    );\n    */\n      // takhle to bude pomoci useReducer\n    setFormIsValid(emailState.isValid && event.target.value.trim().length > 6);\n  \n  };\n\n  const validateEmailHandler = () => {\n    /* takhle to bylo pomoci useState\n    setEmailIsValid(enteredEmail.includes(\"@\"));\n    */\n   // takhle pomoci useReducer:\n   setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    // predtim bylo:  props.onLogin(enteredEmail, enteredPassword);\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailState.isValid === false ? classes.invalid : \"\" // predtim bylo emailIsValid === false?\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value} // predtim bylo value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}